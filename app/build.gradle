plugins {
//    id "jacoco"
    id "org.sonarqube" version "3.0"
}
apply plugin: 'com.android.application'
apply plugin: 'jacoco'


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.alexandruro.whistscoretracker"
        minSdkVersion 18
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    android.defaultConfig.vectorDrawables.useSupportLibrary = true
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    api 'com.google.guava:guava:29.0-jre'

    testImplementation 'junit:junit:4.13'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'org.mockito:mockito-core:2.19.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.ext:truth:1.3.0'
    androidTestImplementation 'com.google.truth:truth:1.0.1'
    androidTestImplementation 'androidx.test:core-ktx:1.3.0'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
}

sonarqube {
    properties {
        property "sonar.projectKey", "alexandruro_Whist-Score-Tracker"
        property "sonar.organization", "alexandruro"
        property "sonar.host.url", "https://sonarcloud.io"

        property "sonar.java.coveragePlugin", "jacoco"
//        property "sonar.jacoco.reportPath", "**/jacoco/*.exec"
//
//        property "sonar.sources", "src/main/java"
//        property "sonar.binaries", "build/intermediates/classes/debug"
//
//        property "sonar.android.lint.report", "build/outputs/lint-results.xml"
//        property "sonar.java.binaries", "build/intermediates/app_classes/debug"
//        property "sonar.jacoco.reportPath","build/jacoco/testDevDebugUnitTest.exec"
//
////        property "sonar.tests", "src/test/java, src/androidTest/java"
////        property "sonar.java.test.binaries", "build/intermediates/classes/debug"
//
////        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files;
////        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files;
////        unit.addAll(ui);
////        def files = unit.join(", ");
//
//        property "sonar.java.coveragePlugin", "jacoco"
//        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*'] // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

//jacocoTestReport {
//    reports {
//        xml.enabled true
//    }
//}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "$project.projectDir/src/main/java"
//
//    getSourceDirectories().setFrom(files([mainSrc]))
//    getClassDirectories().setFrom(files([debugTree]))
//    getExecutionData().setFrom(fileTree(dir: project.buildDir, includes: [
//            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
//    ]))
//}

//task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//    $buildDir = // Location of the build directory for the build Variant
//    def coverageSourceDirs = [
//            "src/main/java"
//    ]
//    def fileFilter = [
//            '**/R.class',
//            '**/R$*.class',
//            '**/*$ViewInjector*.*',
//            '**/*$ViewBinder*.*',
//            '**/BuildConfig.*',
//            '**/Manifest*.*'
//    ]
//    def javaClasses = fileTree(
//            dir: "$buildDir/intermediates/classes/debug",
//            excludes: fileFilter
//    )
//    classDirectories = files([ javaClasses ])
//    additionalSourceDirs = files(coverageSourceDirs)
//    sourceDirectories = files(coverageSourceDirs)
//    executionData = fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec"
//    ])
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//}