plugins {
    id "org.sonarqube" version "3.0"
}
apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'


android {
    compileSdkVersion 33
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.alexandruro.whistscoretracker"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 2
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    android.defaultConfig.vectorDrawables.useSupportLibrary = true
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    def room_version = "2.5.0"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.3.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-guava:$room_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "androidx.savedstate:savedstate:1.1.0"
    kapt "androidx.room:room-compiler:$room_version"
    api 'com.google.guava:guava:29.0-jre'

    testImplementation 'junit:junit:4.13'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation "androidx.room:room-testing:$room_version"
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.ext:truth:1.3.0'
    androidTestImplementation 'com.google.truth:truth:1.0.1'
    androidTestImplementation 'androidx.test:core-ktx:1.3.0'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'org.mockito:mockito-android:2.23.4'
}

sonarqube {
    properties {
        property "sonar.projectKey", "alexandruro_Whist-Score-Tracker"
        property "sonar.organization", "alexandruro"
        property "sonar.host.url", "https://sonarcloud.io"

        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.verbose", "true"
        property "sonar.core.codeCoveragePlugin", "jacoco"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "**/jacocoTestReport/jacocoTestReport.xml"

        property "sonar.java.binaries", "build/intermediates/app_classes/debug"
        property "sonar.java.test.binaries", "build/intermediates/app_classes/debug"

        property "sonar.junit.reportPaths", "build/test-results/testDebugUnitTest"
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*'] // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def coverageSourceDirs = [
            "${project.projectDir}/src/main/java"
    ]
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/exception/*',
            '**/config/*'
    ]
    def javaClasses = fileTree(
            dir: "$project.buildDir/intermediates/app_classes/debug",
            excludes: fileFilter
    )
    getClassDirectories().setFrom(files([ javaClasses ]))
    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(fileTree(dir: "$project.buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ]))
}

tasks.named("sonarqube") {
    dependsOn(tasks.named("jacocoTestReport"))
}
